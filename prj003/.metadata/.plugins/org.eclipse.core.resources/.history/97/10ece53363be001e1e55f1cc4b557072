package com.example.demo.myfirstwebapp.security;

import java.util.function.Function;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;

@Configuration
public class SpringSecurityConfiguration {

	//Typically use Database / LDAP
	//Here we are using in-memory to do the same.
	@Bean
	public InMemoryUserDetailsManager createUserDetailsManager() {


		UserDetails userDetails01 = createNewUser("Paul","dummy");
		UserDetails userDetails02 = createNewUser( "Jess","dummy");

		return new InMemoryUserDetailsManager(userDetails01,userDetails02);
	}

	private UserDetails createNewUser(String username,String password) {
		
		Function<String, String>passwordEncoder
		= input -> passwordEncoder().encode(input);
		
		UserDetails userDetails = User.builder()
				.passwordEncoder(passwordEncoder)
				.username(username)
				.password(password)
				.roles("USER","ADMIN")
				.build();

		return userDetails;
	}
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
}
